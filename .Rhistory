"text",
x = 5, y = 11,  # Position below the grid and centered
label = "1 tile = 1%",  # Text to display
hjust = 0.2, vjust = 0,  # Center the text horizontally
color = "gray19",        # Match the text color to your theme
size = 4                 # Adjust text size
)
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), trans = "reverse") +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Proportion of Companies by Status | â–¡ = 1%",
fill = "Status"  # Legend title
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom",
axis.title = element_blank(),  # Remove axis titles
axis.text = element_blank(),   # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank()    # Remove axis lines
)
p
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), trans = "reverse") +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Proportion of Companies by Status | One Tile = 1%",
fill = "Status"  # Legend title
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom",
axis.title = element_blank(),  # Remove axis titles
axis.text = element_blank(),   # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank()    # Remove axis lines
)
p
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), trans = "reverse") +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Proportion of Companies by Status | One Tile = 1%",
fill = "Status"
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom",
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank()
)
p
library("ggplot2")
library("dplyr")
library("png")
library("grid")
library("tidyr")
library("treemapify")
library("patchwork")
companies <- read.csv("data/companies.csv")
badges <- read.csv("data/badges.csv")
founders <- read.csv("data/founders.csv")
industries <- read.csv("data/industries.csv")
prior_companies <- read.csv("data/prior_companies.csv")
regions <- read.csv("data/regions.csv")
schools <- read.csv("data/schools.csv")
tags <- read.csv("data/tags.csv")
regions
unique(regions$country)
library("maps")
company_counts <- regions %>%
group_by(country) %>%
summarise(n_companies = n(), .groups = 'drop')
map_data <- map_data("world") %>%
left_join(company_counts, by = c("region" = "country"))
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank())
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
custom_theme
orange_palette <- colorRampPalette(c("#FD5612", "#FEF5EF"))
custom_theme <- theme(
plot.background = element_rect(fill = "white"), # White background for the entire plot
panel.background = element_rect(fill = "white"), # White background for the plotting area
panel.grid.major = element_line(color = "gray90"), # Light gray major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.text = element_text(color = "gray19"), # Black axis text
axis.title = element_text(color = "gray19"), # Black axis title
plot.title = element_text(color = "gray19", face = "bold", hjust = 0.5), # Black plot title
legend.background = element_rect(fill = "white"), # White legend background
legend.text = element_text(color = "gray19"), # Black legend text
legend.title = element_text(color = "gray19"), # Black legend title
axis.line = element_line(color = "lightgray"), # Light gray axis lines (tick lines)
axis.ticks = element_line(color = "lightgray") # Light gray axis ticks
)
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
custom_theme
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradientn(colors = orange_palette(10), na.value = "grey50") + +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
custom_theme
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradientn(colors = orange_palette(), na.value = "white") + +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
custom_theme
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradientn(colors = orange_palette(company_counts), na.value = "white") + +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
custom_theme
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradientn(colors = orange_palette(15), na.value = "white") + +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
custom_theme
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradientn(colors = orange_palette(15), na.value = "white") +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
custom_theme
orange_palette <- colorRampPalette(c("#FEF5EF", "#FD5612"))
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradientn(colors = orange_palette(15), na.value = "white") +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
custom_theme
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradientn(colors = orange_palette(15), na.value = "white") +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
custom_theme +
theme_minimal()
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradientn(colors = orange_palette(10), na.value = "white") +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
custom_theme
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradientn(colors = orange_palette(10), na.value = "white") +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
theme(
axis.text = element_blank(),        # Remove axis text
axis.title = element_blank(),       # Remove axis titles
axis.ticks = element_blank(),       # Remove axis ticks
panel.grid = element_blank(),       # Remove grid lines
legend.position = c(0.95, 0.1),     # Move legend to bottom right (inside plot)
legend.justification = c(1, 0),     # Anchor legend to bottom right
legend.background = element_rect(fill = "white", color = "black"), # Add background to legend
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")   # Center the title
)
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradientn(colors = orange_palette(10), na.value = "white") +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = c(0.05, 0.1),
legend.justification = c(1, 0),
legend.background = element_rect(fill = "white", color = "black"),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradientn(colors = orange_palette(10), na.value = "white") +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = c(0.25, 0.1),
legend.justification = c(1, 0),
legend.background = element_rect(fill = "white", color = "gray19"),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradientn(colors = orange_palette(10), na.value = "white") +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
guides(fill = guide_colorbar(
direction = "horizontal",  # Make the legend bar horizontal
barwidth = unit(5, "cm"),  # Adjust the width of the legend bar
barheight = unit(0.3, "cm"), # Adjust the height of the legend bar
title.position = "top",    # Position the legend title above the bar
title.hjust = 0.5          # Center the legend title
)) +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = c(0.25, 0.1),
legend.justification = c(1, 0),
legend.background = element_rect(fill = "white", color = "gray19"),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradientn(colors = orange_palette(10), na.value = "white") +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
guides(fill = guide_colorbar(
direction = "horizontal",
barwidth = unit(5, "cm"),
barheight = unit(0.3, "cm"),
title.position = "top",
title.hjust = 0.5
)) +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = c(0.25, 0.2),
legend.justification = c(1, 0),
legend.background = element_rect(fill = "white", color = "gray19"),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
p <- ggplot(map_data, aes(x = long, y = lat, group = group, fill = n_companies)) +
geom_polygon(color = "black") +
scale_fill_gradientn(colors = orange_palette(10), na.value = "white") +
labs(title = "Number of Companies by Country",
fill = "Number of Companies") +
guides(fill = guide_colorbar(
direction = "horizontal",
barwidth = unit(5, "cm"),
barheight = unit(0.3, "cm"),
title.position = "top",
title.hjust = 0.5
)) +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = c(0.25, 0.2),
legend.justification = c(1, 0),
legend.background = element_rect(fill = "white", color = "gray19"),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
p
# Case study: Actor popularity
library(ggrepel)
imdb <- read.csv('data/action_stars.csv', row.names = 1)
library("ggplot2")
library("dplyr")
library("png")
library("grid")
library("tidyr")
library("treemapify")
library("patchwork")
library("maps")
companies <- read.csv("data/companies.csv")
badges <- read.csv("data/badges.csv")
founders <- read.csv("data/founders.csv")
industries <- read.csv("data/industries.csv")
prior_companies <- read.csv("data/prior_companies.csv")
regions <- read.csv("data/regions.csv")
schools <- read.csv("data/schools.csv")
tags <- read.csv("data/tags.csv")
orange_palette <- colorRampPalette(c("#FEF5EF", "#FD5612"))
custom_theme <- theme(
plot.background = element_rect(fill = "white"), # White background for the entire plot
panel.background = element_rect(fill = "white"), # White background for the plotting area
panel.grid.major = element_line(color = "gray90"), # Light gray major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.text = element_text(color = "gray19"), # Black axis text
axis.title = element_text(color = "gray19"), # Black axis title
plot.title = element_text(color = "gray19", face = "bold", hjust = 0.5), # Black plot title
legend.background = element_rect(fill = "white"), # White legend background
legend.text = element_text(color = "gray19"), # Black legend text
legend.title = element_text(color = "gray19"), # Black legend title
axis.line = element_line(color = "lightgray"), # Light gray axis lines (tick lines)
axis.ticks = element_line(color = "lightgray") # Light gray axis ticks
)
companies$teamSize
##################################################################################
# violin plot of comapny size
##################################################################################
companies
filtered_data <- companies %>%
filter(status != "Inactive", teamSize != 0)
ggplot(filtered_data, aes(x = status, y = teamSize, fill = status)) +
geom_violin(trim = FALSE) +  # trim = FALSE ensures the violins are not trimmed
labs(title = "Violin Plot of Team Size by Company Status",
x = "Status",
y = "Team Size") +
theme_minimal()  # Use a minimal theme for a clean look
filtered_data <- companies %>%
filter(status != "Inactive", teamSize != 0)
ggplot(filtered_data, aes(x = status, y = log(teamSize), fill = status)) +
geom_violin(trim = FALSE) +
labs(title = "Violin Plot of Team Size by Company Status",
x = "Status",
y = "Team Size") +
theme_minimal()
ggplot(filtered_data, aes(x = status, y = log(teamSize), fill = status)) +
geom_violin(trim = FALSE) +
labs(title = "Log of Team Size by Company Status",
x = "Status",
y = "Log Team Size") +
theme_minimal() +
custom_theme
library("ggridges")
ggplot(filtered_data, aes(x = log(teamSize), fill = status)) +
geom_density(alpha = 0.5) +  # Add transparency for overlapping densities
labs(title = "Density Plot of Log Team Size by Company Status",
x = "Log Team Size",
y = "Density") +
theme_minimal() +
custom_theme  # Apply your custom theme
ggplot(filtered_data, aes(x = status, y = log(teamSize))) +
geom_hex(bins = 30) +  # Hexbin plot to show density of points
scale_fill_viridis_c() +  # Use a color scale for density
labs(title = "Hexbin Plot of Log Team Size by Company Status",
x = "Status",
y = "Log Team Size") +
theme_minimal() +
custom_theme  # Apply your custom theme
ggplot(filtered_data, aes(x = status, y = log(teamSize))) +
geom_hex(bins = 30) +  # Hexbin plot to show density of points
scale_fill_viridis_c() +  # Use a color scale for density
labs(title = "Hexbin Plot of Log Team Size by Company Status",
x = "Status",
y = "Log Team Size") +
theme_minimal() +
custom_theme  # Apply your custom theme
ggplot(filtered_data, aes(x = status, y = log(teamSize), color = status)) +
geom_jitter(width = 0.2, alpha = 0.5) +  # Jittered points
geom_violin(trim = FALSE, alpha = 0.2) +  # Add a violin plot for density
labs(title = "Jittered Scatter Plot with Density of Log Team Size",
x = "Status",
y = "Log Team Size") +
theme_minimal() +
custom_theme  # Apply your custom theme
ggplot(filtered_data, aes(x = log(teamSize), y = status, fill = status)) +
geom_density_ridges(alpha = 0.7) +  # Ridge plot for density
labs(title = "Ridge Plot of Log Team Size by Company Status",
x = "Log Team Size",
y = "Status") +
theme_minimal() +
custom_theme  # Apply your custom theme
ggplot(filtered_data, aes(x = log(teamSize), y = status, fill = status)) +
geom_density_ridges(alpha = 0.7) +  # Ridge plot for density
labs(title = "Ridge Plot of Log Team Size by Company Status",
x = "Log Team Size",
y = "Status") +
theme_minimal() +
custom_theme  # Apply your custom theme
ggplot(filtered_data, aes(x = log(teamSize), y = status, fill = status)) +
geom_density_ridges(alpha = 0.7) +
scale_fill_manual(values = orange_palette(length(unique(filtered_data$status)))) +
labs(title = "Log Team Size by Company Status",
x = "Log Team Size") +
theme_minimal() +
custom_theme
custom_theme <- theme(
plot.background = element_rect(fill = "white"), # White background for the entire plot
panel.background = element_rect(fill = "white"), # White background for the plotting area
panel.grid.major = element_line(color = "gray90"), # Light gray major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.text = element_text(color = "gray19"), # Black axis text
axis.title = element_text(color = "gray19"), # Black axis title
plot.title = element_text(color = "gray19", face = "bold", hjust = 0.5), # Black plot title
legend.background = element_rect(fill = "white"), # White legend background
legend.text = element_text(color = "gray19"), # Black legend text
legend.title = element_text(color = "gray19"), # Black legend title
axis.line = element_line(color = "lightgray"), # Light gray axis lines (tick lines)
axis.ticks = element_line(color = "lightgray"), # Light gray axis ticks
panel.border = element_blank(), # Remove border around the plotting area
plot.margin = margin(0, 0, 0, 0) # Remove extra margin around the plot
)
ggplot(filtered_data, aes(x = log(teamSize), y = status, fill = status)) +
geom_density_ridges(alpha = 0.7) +
scale_fill_manual(values = orange_palette(length(unique(filtered_data$status)))) +
labs(title = "Log Team Size by Company Status",
x = "Log Team Size") +
theme_minimal() +
custom_theme
custom_theme <- theme(
plot.background = element_rect(fill = "white"), # White background for the entire plot
panel.background = element_rect(fill = "white"), # White background for the plotting area
panel.grid.major = element_line(color = "gray90"), # Light gray major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.text = element_text(color = "gray19"), # Black axis text
axis.title = element_text(color = "gray19"), # Black axis title
plot.title = element_text(color = "gray19", face = "bold", hjust = 0.5), # Black plot title
legend.background = element_rect(fill = "white"), # White legend background
legend.text = element_text(color = "gray19"), # Black legend text
legend.title = element_text(color = "gray19"), # Black legend title
axis.line = element_line(color = "lightgray"), # Light gray axis lines (tick lines)
axis.ticks = element_line(color = "lightgray"), # Light gray axis ticks
)
ggplot(filtered_data, aes(x = log(teamSize), y = status, fill = status)) +
geom_density_ridges(alpha = 0.7) +
scale_fill_manual(values = orange_palette(length(unique(filtered_data$status)))) +
labs(title = "Log Team Size by Company Status",
x = "Log Team Size") +
custom_theme
ggplot(filtered_data, aes(x = log(teamSize), y = status, fill = status)) +
geom_density_ridges(alpha = 0.7) +
scale_fill_manual(values = orange_palette(length(unique(filtered_data$status)))) +
labs(title = "Log Team Size by Company Status",
x = "Log Team Size") +
custom_theme +
theme(axis.title.y = element_blank())
median_data <- filtered_data %>%
group_by(status) %>%
summarise(median_teamSize = median(teamSize))
ggplot(filtered_data, aes(x = log(teamSize), y = status, fill = status)) +
geom_density_ridges(alpha = 0.7) +
scale_fill_manual(values = orange_palette(length(unique(filtered_data$status)))) +
labs(title = "Log Team Size by Company Status",
x = "Log Team Size") +
custom_theme +
theme(axis.title.y = element_blank()) +
geom_text(data = median_data,
aes(x = max(log(filtered_data$teamSize)), y = status,
label = paste("Median:", round(median_teamSize, 2))),
hjust = 1.1, vjust = -0.2, color = "gray19", size = 3.5)
ggplot(filtered_data, aes(x = log(teamSize), y = status, fill = status)) +
geom_density_ridges(alpha = 0.7) +
scale_fill_manual(values = orange_palette(length(unique(filtered_data$status)))) +
labs(title = "Log Team Size by Company Status",
x = "Log Team Size") +
custom_theme +
theme(axis.title.y = element_blank()) +
geom_text(data = median_data,
aes(x = max(log(filtered_data$teamSize)), y = status,
label = paste("Median:", round(median_teamSize, 2))),
hjust = 1.1, vjust = 0.2, color = "gray19", size = 5.5)
ggplot(filtered_data, aes(x = log(teamSize), y = status, fill = status)) +
geom_density_ridges(alpha = 0.7) +
scale_fill_manual(values = orange_palette(length(unique(filtered_data$status)))) +
labs(title = "Log Team Size by Company Status",
x = "Log Team Size") +
custom_theme +
theme(axis.title.y = element_blank()) +
geom_text(data = median_data,
aes(x = max(log(filtered_data$teamSize)), y = status,
label = paste("Median:", round(median_teamSize, 2))),
hjust = 1.1, vjust = -1, color = "gray19", size = 5.5)
median_data <- median_data %>%
mutate(status_numeric = as.numeric(factor(status)))
ggplot(filtered_data, aes(x = log(teamSize), y = status, fill = status)) +
geom_density_ridges(alpha = 0.7) +
scale_fill_manual(values = orange_palette(length(unique(filtered_data$status)))) +
labs(title = "Log Team Size by Company Status",
x = "Log Team Size") +
custom_theme +
theme(axis.title.y = element_blank()) +
geom_text(data = median_data,
aes(x = max(log(filtered_data$teamSize)), y = status_numeric,
label = paste("Median:", round(median_teamSize, 2))),
hjust = 1.1, vjust = -1, color = "gray19", size = 5.5)
p <- ggplot(filtered_data, aes(x = log(teamSize), y = status, fill = status)) +
geom_density_ridges(alpha = 0.7) +
scale_fill_manual(values = orange_palette(length(unique(filtered_data$status)))) +
labs(title = "Log Team Size by Company Status",
x = "Log Team Size") +
custom_theme +
theme(axis.title.y = element_blank()) +
geom_text(data = median_data,
aes(x = max(log(filtered_data$teamSize)), y = status_numeric,
label = paste("Median:", round(median_teamSize, 2))),
hjust = 1.1, vjust = -1, color = "gray19", size = 5.5)
p
