plot_layout(heights = c(8, 0.1, 2))
combined_plot
library("ggplot2")
library("dplyr")
library("png")
library("grid")
library("tidyr")
library("treemapify")
library("patchwork")
companies <- read.csv("data/companies.csv")
badges <- read.csv("data/badges.csv")
founders <- read.csv("data/founders.csv")
industries <- read.csv("data/industries.csv")
prior_companies <- read.csv("data/prior_companies.csv")
regions <- read.csv("data/regions.csv")
schools <- read.csv("data/schools.csv")
tags <- read.csv("data/tags.csv")
orange_palette <- colorRampPalette(c("#FD5612", "#FEF5EF"))
custom_theme <- theme(
plot.background = element_rect(fill = "white"), # White background for the entire plot
panel.background = element_rect(fill = "white"), # White background for the plotting area
panel.grid.major = element_line(color = "gray90"), # Light gray major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.text = element_text(color = "gray19"), # Black axis text
axis.title = element_text(color = "gray19"), # Black axis title
plot.title = element_text(color = "gray19", face = "bold", hjust = 0.5), # Black plot title
legend.background = element_rect(fill = "white"), # White legend background
legend.text = element_text(color = "gray19"), # Black legend text
legend.title = element_text(color = "gray19"), # Black legend title
axis.line = element_line(color = "lightgray"), # Light gray axis lines (tick lines)
axis.ticks = element_line(color = "lightgray") # Light gray axis ticks
)
# the batches represent Winter (W) and Summer (S) and year (number)
# Winter have 01-YYYY and Summer have 07-YYYY
convert_batch <- function(batch) {
year <- paste0("20", substr(batch, 2, nchar(batch)))
month <- ifelse(substr(batch, 1, 1) == "W", "01", "07")
return(paste0(month, "-", year))
}
companies$batch_date <- sapply(companies$batch, convert_batch)
##################################################################################
# bar plot for count of start-ups in each batch
batch_counts <- companies %>%
mutate(batch_date = as.Date(paste0(batch_date, "-01"), format = "%m-%Y-%d")) %>%
group_by(batch_date) %>%
summarise(count = n()) %>%
arrange(batch_date)
airbnb_logo <- png::readPNG("images/airbnb.png")
dropbox_logo <- png::readPNG("images/dropbox.png")
gitlab_logo <- png::readPNG("images/gitlab.png")
dordash_logo <- png::readPNG("images/dordash.png")
supabase_logo <- png::readPNG("images/supabase.png")
p <- ggplot(batch_counts, aes(x = batch_date, y = count, fill = "#FD5612")) +
geom_bar(stat = "identity") +
labs(
title = "Count of Companies by Batch Date",
x = "Batch Period",
) +
custom_theme +
theme(
legend.position = "none",
axis.title.y = element_blank()
) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "2 year")
p <- p + annotation_custom(rasterGrob(airbnb_logo, width = unit(1, "cm"), height = unit(1, "cm")),
xmin = as.Date("2008-01-07"), xmax = as.Date("2008-01-07"),
ymin = 50, ymax = 100)
p <- p + annotation_custom(rasterGrob(dropbox_logo, width = unit(1, "cm"), height = unit(1, "cm")),
xmin = as.Date("2007-07-01"), xmax = as.Date("2007-07-01"),
ymin = 120, ymax = 170)
p <- p + annotation_custom(rasterGrob(gitlab_logo, width = unit(1, "cm"), height = unit(1, "cm")),
xmin = as.Date("2015-01-01"), xmax = as.Date("2015-01-01"),
ymin = 180, ymax = 230)
p <- p + annotation_custom(rasterGrob(dordash_logo, width = unit(1, "cm"), height = unit(1, "cm")),
xmin = as.Date("2013-07-01"), xmax = as.Date("2013-07-01"),
ymin = 100, ymax = 150)
p <- p + annotation_custom(rasterGrob(supabase_logo, width = unit(1, "cm"), height = unit(1, "cm")),
xmin = as.Date("2020-07-01"), xmax = as.Date("2020-07-01"),
ymin = 340, ymax = 390)
p <- p + geom_segment(
aes(x = as.Date("2008-01-07"), xend = as.Date("2008-01-07"), y = 0, yend = 50),
color = "black",
linetype = "dotted",
size = 0.5
)
p <- p + geom_segment(
aes(x = as.Date("2007-07-01"), xend = as.Date("2007-07-01"), y = 0, yend = 120),
color = "black",
linetype = "dotted",
size = 0.5
)
p <- p + geom_segment(
aes(x = as.Date("2015-01-01"), xend = as.Date("2015-01-01"), y = 0, yend = 180),
color = "black",
linetype = "dotted",
size = 0.5
)
p <- p + geom_segment(
aes(x = as.Date("2013-07-01"), xend = as.Date("2013-07-01"), y = 0, yend = 100),
color = "black",
linetype = "dotted",
size = 0.5
)
p <- p + geom_segment(
aes(x = as.Date("2020-07-01"), xend = as.Date("2020-07-01"), y = 0, yend = 340),
color = "black",
linetype = "dotted",
size = 0.5
)
p
p <- ggplot(batch_counts, aes(x = batch_date, y = count)) +
geom_bar(stat = "identity", fill = "#FD5612") +
labs(
title = "Count of Companies by Batch Date",
x = "Batch Period"
) +
custom_theme +
theme(
legend.position = "none",
axis.title.y = element_blank()
) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "2 year")
p <- p + annotation_custom(rasterGrob(airbnb_logo, width = unit(1, "cm"), height = unit(1, "cm")),
xmin = as.Date("2008-01-07"), xmax = as.Date("2008-01-07"),
ymin = 50, ymax = 100)
p <- p + annotation_custom(rasterGrob(dropbox_logo, width = unit(1, "cm"), height = unit(1, "cm")),
xmin = as.Date("2007-07-01"), xmax = as.Date("2007-07-01"),
ymin = 120, ymax = 170)
p <- p + annotation_custom(rasterGrob(gitlab_logo, width = unit(1, "cm"), height = unit(1, "cm")),
xmin = as.Date("2015-01-01"), xmax = as.Date("2015-01-01"),
ymin = 180, ymax = 230)
p <- p + annotation_custom(rasterGrob(dordash_logo, width = unit(1, "cm"), height = unit(1, "cm")),
xmin = as.Date("2013-07-01"), xmax = as.Date("2013-07-01"),
ymin = 100, ymax = 150)
p <- p + annotation_custom(rasterGrob(supabase_logo, width = unit(1, "cm"), height = unit(1, "cm")),
xmin = as.Date("2020-07-01"), xmax = as.Date("2020-07-01"),
ymin = 340, ymax = 390)
p <- p + geom_segment(
aes(x = as.Date("2008-01-07"), xend = as.Date("2008-01-07"), y = 0, yend = 50),
color = "black",
linetype = "dotted",
size = 0.5
)
p <- p + geom_segment(
aes(x = as.Date("2007-07-01"), xend = as.Date("2007-07-01"), y = 0, yend = 120),
color = "black",
linetype = "dotted",
size = 0.5
)
p <- p + geom_segment(
aes(x = as.Date("2015-01-01"), xend = as.Date("2015-01-01"), y = 0, yend = 180),
color = "black",
linetype = "dotted",
size = 0.5
)
p <- p + geom_segment(
aes(x = as.Date("2013-07-01"), xend = as.Date("2013-07-01"), y = 0, yend = 100),
color = "black",
linetype = "dotted",
size = 0.5
)
p <- p + geom_segment(
aes(x = as.Date("2020-07-01"), xend = as.Date("2020-07-01"), y = 0, yend = 340),
color = "black",
linetype = "dotted",
size = 0.5
)
p
industries_filtered <- industries %>%
filter(!industry %in% c("B2B", "Consumer")) %>%
group_by(industry) %>%
summarise(value = n(), .groups = 'drop')
b2b_consumer <- industries %>%
filter(industry %in% c("B2B", "Consumer")) %>%
group_by(industry) %>%
summarise(value = n(), .groups = 'drop')
orange_palette <- colorRampPalette(c("#FD5612", "#FEF5EF"))
colors <- orange_palette(nrow(industries_filtered))
#treemap
treemap_plot <- ggplot(industries_filtered, aes(area = value, fill = industry, label = industry)) +
geom_treemap() +
geom_treemap_text(colour = "gray19", place = "centre", grow = TRUE) +
scale_fill_manual(values = colors) +
theme(legend.position = "none") +
labs(title = "Industries and Target Group") +
custom_theme
#bar chart
stacked_bar_plot <- ggplot(b2b_consumer, aes(x = 1, y = value, fill = industry)) +
geom_bar(stat = "identity", position = "stack", width = 0.2) +
coord_flip() +
theme_void() +
geom_text(aes(label = industry),
position = position_stack(vjust = 0.5),
color = "gray19", size = 5) +
scale_fill_manual(values = c("B2B" = "#FD5612", "Consumer" = "#FEF5EF")) +
theme(legend.position = "none")
dotted_line_plot <- ggplot() +
geom_hline(yintercept = 0, linetype = "dotted", color = "gray19", size = 0.5) +
theme_void()
combined_plot <- treemap_plot / dotted_line_plot / stacked_bar_plot +
plot_layout(heights = c(8, 0.1, 2))
combined_plot
df <- expand.grid(y = 1:10, x = 1:10)
categ_table <- round(table(companies$status) * ((10 * 10) / length(companies$status)))
if (sum(categ_table) != 100) {
categ_table[which.max(categ_table)] <- categ_table[which.max(categ_table)] + (100 - sum(categ_table))
}
df$Categories <- factor(rep(names(categ_table), categ_table))
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +  # Add black borders to tiles
scale_x_continuous(expand = c(0, 0)) +  # Remove padding on x-axis
scale_y_continuous(expand = c(0, 0), trans = "reverse") +  # Reverse y-axis and remove padding
scale_fill_brewer(palette = "Set3") +  # Use a color palette
labs(
title = "Waffle Chart of Companies by Status",
subtitle = "Distribution of company statuses",
caption = "Source: Your Data"
) +
theme_void() +  # Use a minimal theme
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),  # Adjust margins
legend.position = "bottom"  # Move legend to the bottom
)
p
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), trans = "reverse") +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Waffle Chart of Companies by Status",
subtitle = "Distribution of company statuses",
caption = "Source: Your Data"
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom"
)
p
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), trans = "reverse") +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Proportion of Companies by Status",
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom"
)
p
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Proportion of Companies by Status",
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom"
)
p
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), trans = "reverse") +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Proportion of Companies by Status",
fill = "Status"  # Legend title
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom",
axis.title = element_blank(),  # Remove axis titles
axis.text = element_blank(),   # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank()    # Remove axis lines
) +
annotate(
"text",
x = Inf, y = Inf,  # Position at the bottom-right corner
label = "1 tile = 1%",  # Text to display
hjust = 1.1, vjust = 2,  # Adjust position relative to the corner
color = "gray19",        # Match the text color to your theme
size = 4                 # Adjust text size
)
p
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), trans = "reverse") +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Proportion of Companies by Status",
fill = "Status"  # Legend title
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom",
axis.title = element_blank(),  # Remove axis titles
axis.text = element_blank(),   # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank()    # Remove axis lines
) +
annotate(
"text",
x = 10.5, y = 10.5,  # Position slightly outside the grid
label = "1 tile = 1%",  # Text to display
hjust = 0, vjust = 0,  # Align text to the top-left of the point
color = "gray19",      # Match the text color to your theme
size = 4               # Adjust text size
)
p
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), trans = "reverse") +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Proportion of Companies by Status",
fill = "Status"  # Legend title
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom",
axis.title = element_blank(),  # Remove axis titles
axis.text = element_blank(),   # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank()    # Remove axis lines
) +
annotate(
"text",
x = 5, y = 11,  # Position below the grid and centered
label = "1 tile = 1%",  # Text to display
hjust = 0.5, vjust = 0,  # Center the text horizontally
color = "gray19",        # Match the text color to your theme
size = 4                 # Adjust text size
)
p
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), trans = "reverse") +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Proportion of Companies by Status",
fill = "Status"  # Legend title
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom",
axis.title = element_blank(),  # Remove axis titles
axis.text = element_blank(),   # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank()    # Remove axis lines
) +
annotate(
"text",
x = 5, y = 11,  # Position below the grid and centered
label = "1 tile = 1%",  # Text to display
hjust = 0.2, vjust = 0,  # Center the text horizontally
color = "gray19",        # Match the text color to your theme
size = 4                 # Adjust text size
)
p
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), trans = "reverse") +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Proportion of Companies by Status",
fill = "Status"  # Legend title
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom",
axis.title = element_blank(),  # Remove axis titles
axis.text = element_blank(),   # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank()    # Remove axis lines
) +
annotate(
"text",
x = 5, y = 30,  # Position below the grid and centered
label = "1 tile = 1%",  # Text to display
hjust = 0.2, vjust = 0,  # Center the text horizontally
color = "gray19",        # Match the text color to your theme
size = 4                 # Adjust text size
)
p
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), trans = "reverse") +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Proportion of Companies by Status",
fill = "Status"  # Legend title
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom",
axis.title = element_blank(),  # Remove axis titles
axis.text = element_blank(),   # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank()    # Remove axis lines
) +
annotate(
"text",
x = 5, y = 11,  # Position below the grid and centered
label = "1 tile = 1%",  # Text to display
hjust = 0.2, vjust = 0,  # Center the text horizontally
color = "gray19",        # Match the text color to your theme
size = 4                 # Adjust text size
)
p
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), trans = "reverse") +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Proportion of Companies by Status | □ = 1%",
fill = "Status"  # Legend title
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom",
axis.title = element_blank(),  # Remove axis titles
axis.text = element_blank(),   # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank()    # Remove axis lines
) +
annotate(
"text",
x = 5, y = 11,  # Position below the grid and centered
label = "1 tile = 1%",  # Text to display
hjust = 0.2, vjust = 0,  # Center the text horizontally
color = "gray19",        # Match the text color to your theme
size = 4                 # Adjust text size
)
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), trans = "reverse") +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Proportion of Companies by Status | □ = 1%",
fill = "Status"  # Legend title
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom",
axis.title = element_blank(),  # Remove axis titles
axis.text = element_blank(),   # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank()    # Remove axis lines
)
p
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), trans = "reverse") +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Proportion of Companies by Status | One Tile = 1%",
fill = "Status"  # Legend title
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom",
axis.title = element_blank(),  # Remove axis titles
axis.text = element_blank(),   # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank()    # Remove axis lines
)
p
p <- ggplot(df, aes(x = x, y = y, fill = Categories)) +
geom_tile(color = "black", size = 0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), trans = "reverse") +
scale_fill_manual(values = orange_palette(length(unique(df$Categories)))) +
labs(
title = "Proportion of Companies by Status | One Tile = 1%",
fill = "Status"
) +
custom_theme +
theme(
plot.margin = unit(c(0.2, 0.1, 0.2, 0.1), units = "in"),
legend.position = "bottom",
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank()
)
p
